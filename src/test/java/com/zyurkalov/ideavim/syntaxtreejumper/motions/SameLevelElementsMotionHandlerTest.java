package com.zyurkalov.ideavim.syntaxtreejumper.motions;import com.intellij.openapi.application.ApplicationManager;import com.intellij.psi.PsiFile;import com.intellij.testFramework.fixtures.CodeInsightTestFixture;import com.intellij.testFramework.fixtures.IdeaProjectTestFixture;import com.intellij.testFramework.fixtures.IdeaTestFixtureFactory;import com.intellij.testFramework.fixtures.TestFixtureBuilder;import com.zyurkalov.ideavim.syntaxtreejumper.Direction;import com.zyurkalov.ideavim.syntaxtreejumper.Offsets;import org.jetbrains.annotations.NotNull;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.params.ParameterizedTest;import org.junit.jupiter.params.provider.MethodSource;import java.util.Optional;import java.util.stream.Stream;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;class SameLevelElementsMotionHandlerTest {    private CodeInsightTestFixture myFixture;    @BeforeEach    public void setUp() throws Exception {        IdeaTestFixtureFactory factory = IdeaTestFixtureFactory.getFixtureFactory();        TestFixtureBuilder<IdeaProjectTestFixture> fixtureBuilder = factory.createLightFixtureBuilder(getClass().getName());        IdeaProjectTestFixture fixture = fixtureBuilder.getFixture();        myFixture = factory.createCodeInsightFixture(fixture);        myFixture.setUp();    }    @AfterEach    public void tearDown() throws Exception {        myFixture.tearDown();    }    record SameLevelElementsTestData(            Offsets initialOffsets, String text,            Offsets nextElementOffsets, String nextElementText,            Direction direction,            String explanation    ) {        @Override        public @NotNull String toString() {            return explanation;        }    }    // Forward navigation test cases    static Stream<SameLevelElementsTestData> forwardNavigationTestCases() {        return Stream.of(                new SameLevelElementsTestData(                        new Offsets(119, 119) , "for",                        new Offsets(123, 124), "(",                        Direction.FORWARD,                        "Next RSI: from no selection to the next element"                ),                new SameLevelElementsTestData(                        new Offsets(119, 120) , "for",                        new Offsets(123, 124), "(",                        Direction.FORWARD,                        "Next RSI: from one symbol selection to the next object of one symbol"                ),                new SameLevelElementsTestData(                        new Offsets(119, 122) , "for",                        new Offsets(123, 124), "(",                        Direction.FORWARD,                        "Next RSI: from one word selection to the next object of one symbol"                ),                new SameLevelElementsTestData(                        new Offsets(123, 123) , "(",                        new Offsets(124, 134), "int i = 0;",                        Direction.FORWARD,                        "Next RSI: from one symbol to a declaration statement"                ),                new SameLevelElementsTestData(                        new Offsets(124, 127), "int",                        new Offsets(128, 129) , "i",                        Direction.FORWARD,                        "Next RSI: type to identifier within declaration"                ),                new SameLevelElementsTestData(                        new Offsets(83, 106), "int[] a = new int[10] ;",                        new Offsets(119, 193), """                    for (int i = 0; i < 10; i++) {                                    a[i] = 2 * i;                                }""",                        Direction.FORWARD,                        "Next compound RSI: a compound element to a compound element"                ),                new SameLevelElementsTestData(                        new Offsets(119, 193), """                    for (int i = 0; i < 10; i++) {                                    a[i] = 2 * i;                                }""",                        new Offsets(198, 199), "}",                        Direction.FORWARD,                        "Next RSI: a compound statement to one symbol"                ),                new SameLevelElementsTestData(                        new Offsets(253, 267), "//Test comment;",                        new Offsets(280, 312), "System.out.println(\"Something\");",                        Direction.FORWARD,                        "Next RSI: the commend without prior white spaces"                ),                new SameLevelElementsTestData(                        new Offsets(17, 43), "SameLevelElementsNavigator",                        new Offsets(44, 45), "{",                        Direction.FORWARD,                        "Next RSI: WhiteSpace after a class name"                )        );    }    // Backward navigation test cases    static Stream<SameLevelElementsTestData> backwardNavigationTestCases() {        return Stream.of(                new SameLevelElementsTestData(                        new Offsets(198, 198), "}",                        new Offsets(119, 193), """                for (int i = 0; i < 10; i++) {                                a[i] = 2 * i;                            }""",                        Direction.BACKWARD,                        "Previous RSI: from a symbol to a compound statement"                ),                new SameLevelElementsTestData(                        new Offsets(119, 193), """                for (int i = 0; i < 10; i++) {                                a[i] = 2 * i;                            }""",                        new Offsets(83, 106), "int[] a = new int[10] ;",                        Direction.BACKWARD,                        "Previous compound RSI: from a compound element to a compound element"                ),                new SameLevelElementsTestData(                        new Offsets(133, 134), ";",                        new Offsets(132, 133), "0",                        Direction.BACKWARD,                        "Previous RSI: from a short selection to a short selection"                )        );    }    // Subword navigation test cases    static Stream<SameLevelElementsTestData> subwordNavigationTestCases() {        return Stream.of(                new SameLevelElementsTestData(                        new Offsets(17, 17), "SameLevelElementsNavigator",                        new Offsets(21, 26), "Level",                        Direction.FORWARD,                        "Next RSI: Subword in a class name"                ),                new SameLevelElementsTestData(                        new Offsets(21, 21), "SameLevelElementsNavigator",                        new Offsets(17, 21), "Same",                        Direction.BACKWARD,                        "Previous RSI: Subword in a class name"                ),                new SameLevelElementsTestData(                        new Offsets(346, 350), "List",                        new Offsets(339, 346), "product",                        Direction.BACKWARD,                        "Previous RSI: Subword in a variable name"                )        );    }    // Edge cases and boundary conditions    static Stream<SameLevelElementsTestData> edgeCaseTestCases() {        return Stream.of(                new SameLevelElementsTestData(                        new Offsets(178, 179), ";",                        new Offsets(178, 179) , ";",                        Direction.FORWARD,                        "Last RSI: last element remains at last position"                ),                new SameLevelElementsTestData(                        new Offsets(346, 350), "List",                        new Offsets(346, 350), "List",                        Direction.FORWARD,                        "Edge case: don't go anywhere from the last Subword"                ),                new SameLevelElementsTestData(                        new Offsets(347, 347), "i",                        new Offsets(346, 350), "List",                        Direction.FORWARD,                        "Edge case: don't go anywhere from the part of last Subword"                ),                new SameLevelElementsTestData(                        new Offsets(339, 346), "product",                        new Offsets(339, 346), "product",                        Direction.BACKWARD,                        "Edge case: don't go anywhere from the last Subword"                )        );    }    @ParameterizedTest    @MethodSource("forwardNavigationTestCases")    void testForwardNavigation(SameLevelElementsTestData testData) {        runNavigationTest(testData);    }    @ParameterizedTest    @MethodSource("backwardNavigationTestCases")    void testBackwardNavigation(SameLevelElementsTestData testData) {        runNavigationTest(testData);    }    @ParameterizedTest    @MethodSource("subwordNavigationTestCases")    void testSubwordNavigation(SameLevelElementsTestData testData) {        runNavigationTest(testData);    }    @ParameterizedTest    @MethodSource("edgeCaseTestCases")    void testEdgeCases(SameLevelElementsTestData testData) {        runNavigationTest(testData);    }    private void runNavigationTest(SameLevelElementsTestData testData) {        String javaCode = """                    public class SameLevelElementsNavigator {                        void execute() {                            int[] a = new int[10] ;                            for (int i = 0; i < 10; i++) {                                a[i] = 2 * i;                            }                    }                    class Test1 {                        void test2() {                            //Test comment                            System.out.println("Something");                            List<Product> productList = new ArrayList<>();                        }                    }                """;        System.out.println(javaCode.indexOf("a[i] = 2 * i;"));        Offsets initialOffsets = testData.initialOffsets;        assertTrue(                testData.text.contains(javaCode.substring(initialOffsets.leftOffset(), initialOffsets.rightOffset())),                "The prerequisite if the test is that we place the cursor as intended"        );        PsiFile javaText = myFixture.configureByText("test.java", javaCode);        var sameLevelElementsNavigator = new SameLevelElementsMotionHandler(javaText, testData.direction);        ApplicationManager.getApplication().runReadAction(() -> {            Optional<Offsets> nextOffsets = sameLevelElementsNavigator.findNext(initialOffsets);            Offsets actualOffsets = nextOffsets.orElseThrow();            assertEquals(testData.nextElementOffsets, actualOffsets);            assertEquals(testData.nextElementText(), javaCode.substring(actualOffsets.leftOffset(), actualOffsets.rightOffset()));        });    }}