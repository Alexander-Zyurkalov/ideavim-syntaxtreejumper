package com.zyurkalov.ideavim.syntaxtreejumper;import com.intellij.openapi.application.ApplicationManager;import com.intellij.psi.PsiFile;import com.intellij.testFramework.fixtures.CodeInsightTestFixture;import com.intellij.testFramework.fixtures.IdeaProjectTestFixture;import com.intellij.testFramework.fixtures.IdeaTestFixtureFactory;import com.intellij.testFramework.fixtures.TestFixtureBuilder;import org.jetbrains.annotations.NotNull;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.params.ParameterizedTest;import org.junit.jupiter.params.provider.MethodSource;import java.util.Optional;import java.util.stream.Stream;import static org.junit.jupiter.api.Assertions.*;class SameLevelElementsNavigatorTest  {    private CodeInsightTestFixture myFixture;    @BeforeEach // or @BeforeEach for JUnit 5    public void setUp() throws Exception {        IdeaTestFixtureFactory factory = IdeaTestFixtureFactory.getFixtureFactory();        TestFixtureBuilder<IdeaProjectTestFixture> fixtureBuilder = factory.createLightFixtureBuilder(getClass().getName());        IdeaProjectTestFixture fixture = fixtureBuilder.getFixture();        myFixture = factory.createCodeInsightFixture(fixture);        myFixture.setUp();    }    @AfterEach    public void tearDown() throws Exception {        myFixture.tearDown();    }    record SameLevelElementsTestData(        Offsets initialOffsets, String text,        Offsets nextElementOffsets, String nextElementText,        SameLevelElementsNavigator.Direction direction,        String explanation    ) {        @Override        public @NotNull String toString() {            return explanation;        }    }    static Stream<SameLevelElementsTestData> testNavigationCases() {        return Stream.of(            new SameLevelElementsTestData(                new Offsets(119, 119) , "for",                new Offsets(123, 124), "(",                SameLevelElementsNavigator.Direction.FORWARD,                "Next RSI: from no selection to the next element"            ),            new SameLevelElementsTestData(                new Offsets(119, 120) , "for",                new Offsets(123, 124), "(",                SameLevelElementsNavigator.Direction.FORWARD,                "Next RSI: from one symbol selection to the next object of one symbol"            ),            new SameLevelElementsTestData(                new Offsets(119, 122) , "for",                new Offsets(123, 124), "(",                SameLevelElementsNavigator.Direction.FORWARD,                "Next RSI: from one word selection to the next object of one symbol"            ),            new SameLevelElementsTestData(                new Offsets(123, 123) , "(",                new Offsets(124, 134), "int i = 0;",                SameLevelElementsNavigator.Direction.FORWARD,                "Next RSI: from one symbol to a declaration statement"            ),            new SameLevelElementsTestData(                new Offsets(124, 127), "int",                new Offsets(128, 129) , "i",                SameLevelElementsNavigator.Direction.FORWARD,                "Next RSI: type to identifier within declaration"            ),            new SameLevelElementsTestData(                new Offsets(178, 179), ";",                new Offsets(178, 179) , ";",                SameLevelElementsNavigator.Direction.FORWARD,                "Last RSI: last element remains at last position"            ),            new SameLevelElementsTestData(                new Offsets(83, 106), "int[] a = new int[10] ;",                new Offsets(119, 193), """                    for (int i = 0; i < 10; i++) {                                    a[i] = 2 * i;                                }""",                SameLevelElementsNavigator.Direction.FORWARD,                "Next compound RSI: a compound element to a compound element"            ),            new SameLevelElementsTestData(                new Offsets(119, 193), """                    for (int i = 0; i < 10; i++) {                                    a[i] = 2 * i;                                }""",                new Offsets(198, 199), "}",                SameLevelElementsNavigator.Direction.FORWARD,                "Next RSI: a compound statement to one symbol"            ),            new SameLevelElementsTestData(                new Offsets(198, 198), "}",                new Offsets(119, 193), """                for (int i = 0; i < 10; i++) {                                a[i] = 2 * i;                            }""",                SameLevelElementsNavigator.Direction.BACKWARD,                "Previous RSI: from a symbol to a compound statement"            ),            new SameLevelElementsTestData(                new Offsets(119, 193), """                for (int i = 0; i < 10; i++) {                                a[i] = 2 * i;                            }""",                new Offsets(83, 106), "int[] a = new int[10] ;",                SameLevelElementsNavigator.Direction.BACKWARD,                "Previous compound RSI: from a compount element to a compound element"            ),            new SameLevelElementsTestData(                new Offsets(133, 134), ";",                new Offsets(132, 133), "0",                SameLevelElementsNavigator.Direction.BACKWARD,                "Previous RSI: from a short selection to a short selection"            ),            new SameLevelElementsTestData(                new Offsets(253, 267), "//Test comment;",                new Offsets(280, 312), "System.out.println(\"Something\");",                SameLevelElementsNavigator.Direction.FORWARD,                "Next RSI: the commend without prior white spaces"            ),            new SameLevelElementsTestData(                new Offsets(241, 267), "            //Test comment",                new Offsets(280, 312), "System.out.println(\"Something\");",                SameLevelElementsNavigator.Direction.FORWARD,                "Next RSI: the commend with prior white spaces"            ),            new SameLevelElementsTestData(                new Offsets(17, 43), "SameLevelElementsNavigator",                new Offsets(44, 45), "{",                SameLevelElementsNavigator.Direction.FORWARD,                "Next RSI: WhiteSpace after a class name"            ),            new SameLevelElementsTestData(                new Offsets(21, 21), "SameLevelElementsNavigator",                new Offsets(26, 27), "Elements",                SameLevelElementsNavigator.Direction.FORWARD,                "Next Subword: after a subword"            )        );    }    @ParameterizedTest    @MethodSource("testNavigationCases")    void testElementNavigationWithinSameLevelScope(SameLevelElementsTestData testData) {        String javaCode = """                    public class SameLevelElementsNavigator {                        void execute() {                            int[] a = new int[10] ;                            for (int i = 0; i < 10; i++) {                                a[i] = 2 * i;                            }                    }                    class Test1 {                        void test2() {                            //Test comment                            System.out.println("Something");                        }                    }                """;        Offsets initialOffsets = testData.initialOffsets;        assertTrue(            testData.text.contains(javaCode.substring(initialOffsets.leftOffset(), initialOffsets.rightOffset())),                "The prerequisite if the test is that we place the cursor as intended"        );        PsiFile forLoopText = myFixture.configureByText("test.java", javaCode);        var sameLevelElementsNavigator = new SameLevelElementsNavigator(forLoopText, testData.direction);        ApplicationManager.getApplication().runReadAction(() -> {            Optional<Offsets> nextOffsets = sameLevelElementsNavigator.findNextObjectsOffsets(initialOffsets);            Offsets actualOffsets = nextOffsets.orElseThrow();            assertEquals(testData.nextElementOffsets, actualOffsets);            assertEquals(testData.nextElementText(), javaCode.substring(actualOffsets.leftOffset(), actualOffsets.rightOffset()));        });    }    record SubWordTestCase(        String explanation    ) {        @Override        public @NotNull String toString() {            return explanation;        }    }    static Stream<SubWordTestCase> nextSubWordTestCase() {        return Stream.of(            new SubWordTestCase("")        );    }    @ParameterizedTest    @MethodSource("nextSubWordTestCase")    void testFindNextSubWord(SubWordTestCase testCase) {        assertEquals(1, 1, testCase.explanation() );    }}